poly:=proc(a)
	local p,r;
	p:=1;
	for r in a do
		p:=p*(x-r);
	end;
	expand(p);
end:

horner:=proc(p,a)
	local i,n,H;
	n:=degree(p);
	H:=Matrix(3,n+1);
	H[2,1]:=a;
	for i from 0 to n do
		H[1,i+1]:=coeff(p,x,n-i);	
	end;
	H[3,1]:=H[1,1];
	for i from 1 to n do
		H[2,i+1]:=H[3,i]*a;
		H[3,i+1]:=H[1,i+1]+H[2,i+1];
	end;
	printf("%4d\n\n",H);		
	H[3,n+1],add(H[3,i]*x^(n-i),i=1..n);	
end:

cand:=proc(p)
	local i,c;
	i:=0;
	while coeff(p,x,i)=0 do
		i:=i+1;
	end;
	c:=coeff(p,x,i);
	c:=NumberTheory[Divisors](c);
	c:=op(c);
	0,c,-c;
end:

intr:=proc(poly)
	local h,p,a,d,r;
	p:=poly;
	d:=cand(p);
	r:=();
	for a in d do
	 h:=horner(p,a);
	 while h[1]=0 do	
		p:=h[2];
		r:=r,a;
		print(p);			
		h:=horner(p,a);
	 end;
	end;
	return r;
end:
