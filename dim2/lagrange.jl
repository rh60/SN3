function LagrangeBase(n::Int)
    if n==1
        [(x,y) -> 1 - x - y, (x,y) -> x, (x,y) -> y],
        [(x,y) -> -1, (x,y) -> 1, (x,y) -> 0],
        [(x,y) -> -1, (x,y) -> 0, (x,y) -> 1]
    elseif n==2
        [(x,y) -> (1 - x - y) * (1 - 2 * x - 2 * y)
        (x,y) -> x * (2 * x - 1)
        (x,y) -> y * (2 * y - 1)
        (x,y) -> 2 * x * (2 - 2 * x - 2 * y)
        (x,y) -> 4 * x * y
        (x,y) -> 2 * y * (2 - 2 * x - 2 * y)],
        [(x,y) -> -3 + 4 * x + 4 * y
        (x,y) -> 4 * x - 1
        (x,y) -> 0
        (x,y) -> 4 - 8 * x - 4 * y
        (x,y) -> 4 * y
        (x,y) -> -4 * y],
        [(x,y) -> -3 + 4 * x + 4 * y
        (x,y) -> 0
        (x,y) -> 4 * y - 1
        (x,y) -> -4 * x
        (x,y) -> 4 * x
        (x,y) -> 4 - 4 * x - 8 * y]
    elseif n==3
        [(x,y) -> (1 - x - y) * (1 - 3/2 * x - 3/2 * y) * (1 - 3 * x - 3 * y)
        (x,y) -> x * (3/2 * x - 1/2) * (3 * x - 2)
        (x,y) -> y * (3/2 * y - 1/2) * (3 * y - 2)
        (x,y) -> 9/2 * x * (1 - x - y) * (2 - 3 * x - 3 * y)
        (x,y) -> 3/2 * x * (3 * x - 1) * (3 - 3 * x - 3 * y)
        (x,y) -> 9/2 * x * (3 * x - 1) * y
        (x,y) -> 9/2 * x * y * (3 * y - 1)
        (x,y) -> 3/2 * y * (3 * y - 1) * (3 - 3 * x - 3 * y)
        (x,y) -> 9/2 * y * (1 - x - y) * (2 - 3 * x - 3 * y)
        (x,y) -> 9 * x * y * (3 - 3 * x - 3 * y)],
        [(x,y) -> -(1 - 3/2 * x - 3/2 * y) * (1 - 3 * x - 3 * y) - 3/2 * (1 - x - y) * (1 - 3 * x - 3 * y) - 3 * (1 - x - y) * (1 - 3/2 * x - 3/2 * y)
        (x,y) -> (3/2 * x - 1/2) * (3 * x - 2) + 3/2 * x * (3 * x - 2) + 3 * x * (3/2 * x - 1/2)
        (x,y) -> 0
        (x,y) -> 9/2 * (1 - x - y) * (2 - 3 * x - 3 * y) - 9/2 * x * (2 - 3 * x - 3 * y) - 27/2 * x * (1 - x - y)
        (x,y) -> 3/2 * (3 * x - 1) * (3 - 3 * x - 3 * y) + 9/2 * x * (3 - 3 * x - 3 * y) - 9/2 * x * (3 * x - 1)
        (x,y) -> 9/2 * (3 * x - 1) * y + 27/2 * x * y
        (x,y) -> 9/2 * y * (3 * y - 1)
        (x,y) -> -9/2 * y * (3 * y - 1)
        (x,y) -> -9/2 * y * (2 - 3 * x - 3 * y) - 27/2 * y * (1 - x - y)
        (x,y) -> 9 * y * (3 - 3 * x - 3 * y) - 27 * x * y],
        [(x,y) -> -(1 - 3/2 * x - 3/2 * y) * (1 - 3 * x - 3 * y) - 3/2 * (1 - x - y) * (1 - 3 * x - 3 * y) - 3 * (1 - x - y) * (1 - 3/2 * x - 3/2 * y)
        (x,y) -> 0
        (x,y) -> (3/2 * y - 1/2) * (3 * y - 2) + 3/2 * y * (3 * y - 2) + 3 * y * (3/2 * y - 1/2)
        (x,y) -> -9/2 * x * (2 - 3 * x - 3 * y) - 27/2 * x * (1 - x - y)
        (x,y) -> -9/2 * x * (3 * x - 1)
        (x,y) -> 9/2 * x * (3 * x - 1)
        (x,y) -> 9/2 * x * (3 * y - 1) + 27/2 * x * y
        (x,y) -> 3/2 * (3 * y - 1) * (3 - 3 * x - 3 * y) + 9/2 * y * (3 - 3 * x - 3 * y) - 9/2 * y * (3 * y - 1)
        (x,y) -> 9/2 * (1 - x - y) * (2 - 3 * x - 3 * y) - 9/2 * y * (2 - 3 * x - 3 * y) - 27/2 * y * (1 - x - y)
        (x,y) -> 9 * x * (3 - 3 * x - 3 * y) - 27 * x * y]
    elseif n==4
        [(x,y) -> (1 - x - y) * (1 - 4/3 * x - 4/3 * y) * (1 - 2 * x - 2 * y) * (1 - 4 * x - 4 * y)
        (x,y) -> x * (4/3 * x - 1/3) * (2 * x - 1) * (4 * x - 3)
        (x,y) -> y * (4/3 * y - 1/3) * (2 * y - 1) * (4 * y - 3)
        (x,y) -> 16/3 * x * (1 - x - y) * (3/2 - 2 * x - 2 * y) * (2 - 4 * x - 4 * y)
        (x,y) -> 4 * x * (4 * x - 1) * (1 - x - y) * (3 - 4 * x - 4 * y)
        (x,y) -> 4/3 * x * (2 * x - 1/2) * (4 * x - 2) * (4 - 4 * x - 4 * y)
        (x,y) -> 16/3 * x * (2 * x - 1/2) * (4 * x - 2) * y
        (x,y) -> 4 * x * (4 * x - 1) * y * (4 * y - 1)
        (x,y) -> 16/3 * x * y * (2 * y - 1/2) * (4 * y - 2)
        (x,y) -> 4/3 * y * (2 * y - 1/2) * (4 * y - 2) * (4 - 4 * x - 4 * y)
        (x,y) -> 4 * y * (4 * y - 1) * (1 - x - y) * (3 - 4 * x - 4 * y)
        (x,y) -> 16/3 * y * (1 - x - y) * (3/2 - 2 * x - 2 * y) * (2 - 4 * x - 4 * y)
        (x,y) -> 32 * x * y * (1 - x - y) * (3 - 4 * x - 4 * y)
        (x,y) -> 8 * x * (4 * x - 1) * y * (4 - 4 * x - 4 * y)
        (x,y) -> 8 * x * y * (4 * y - 1) * (4 - 4 * x - 4 * y)],
        [(x,y) -> -(1 - 4/3 * x - 4/3 * y) * (1 - 2 * x - 2 * y) * (1 - 4 * x - 4 * y) - 4/3 * (1 - x - y) * (1 - 2 * x - 2 * y) * (1 - 4 * x - 4 * y) - 2 * (1 - x - y) * (1 - 4/3 * x - 4/3 * y) * (1 - 4 * x - 4 * y) - 4 * (1 - x - y) * (1 - 4/3 * x - 4/3 * y) * (1 - 2 * x - 2 * y)
        (x,y) -> (4/3 * x - 1/3) * (2 * x - 1) * (4 * x - 3) + 4/3 * x * (2 * x - 1) * (4 * x - 3) + 2 * x * (4/3 * x - 1/3) * (4 * x - 3) + 4 * x * (4/3 * x - 1/3) * (2 * x - 1)
        (x,y) -> 0
        (x,y) -> 16/3 * (1 - x - y) * (3/2 - 2 * x - 2 * y) * (2 - 4 * x - 4 * y) - 16/3 * x * (3/2 - 2 * x - 2 * y) * (2 - 4 * x - 4 * y) - 32/3 * x * (1 - x - y) * (2 - 4 * x - 4 * y) - 64/3 * x * (1 - x - y) * (3/2 - 2 * x - 2 * y)
        (x,y) -> 4 * (4 * x - 1) * (1 - x - y) * (3 - 4 * x - 4 * y) + 16 * x * (1 - x - y) * (3 - 4 * x - 4 * y) - 4 * x * (4 * x - 1) * (3 - 4 * x - 4 * y) - 16 * x * (4 * x - 1) * (1 - x - y)
        (x,y) -> 4/3 * (2 * x - 1/2) * (4 * x - 2) * (4 - 4 * x - 4 * y) + 8/3 * x * (4 * x - 2) * (4 - 4 * x - 4 * y) + 16/3 * x * (2 * x - 1/2) * (4 - 4 * x - 4 * y) - 16/3 * x * (2 * x - 1/2) * (4 * x - 2)
        (x,y) -> 16/3 * (2 * x - 1/2) * (4 * x - 2) * y + 32/3 * x * (4 * x - 2) * y + 64/3 * x * (2 * x - 1/2) * y
        (x,y) -> 4 * (4 * x - 1) * y * (4 * y - 1) + 16 * x * y * (4 * y - 1)
        (x,y) -> 16/3 * y * (2 * y - 1/2) * (4 * y - 2)
        (x,y) -> -16/3 * y * (2 * y - 1/2) * (4 * y - 2)
        (x,y) -> -4 * y * (4 * y - 1) * (3 - 4 * x - 4 * y) - 16 * y * (4 * y - 1) * (1 - x - y)
        (x,y) -> -16/3 * y * (3/2 - 2 * x - 2 * y) * (2 - 4 * x - 4 * y) - 32/3 * y * (1 - x - y) * (2 - 4 * x - 4 * y) - 64/3 * y * (1 - x - y) * (3/2 - 2 * x - 2 * y)
        (x,y) -> 32 * y * (1 - x - y) * (3 - 4 * x - 4 * y) - 32 * x * y * (3 - 4 * x - 4 * y) - 128 * x * y * (1 - x - y)
        (x,y) -> 8 * (4 * x - 1) * y * (4 - 4 * x - 4 * y) + 32 * x * y * (4 - 4 * x - 4 * y) - 32 * x * (4 * x - 1) * y
        (x,y) -> 8 * y * (4 * y - 1) * (4 - 4 * x - 4 * y) - 32 * x * y * (4 * y - 1)],
        [(x,y) -> -(1 - 4/3 * x - 4/3 * y) * (1 - 2 * x - 2 * y) * (1 - 4 * x - 4 * y) - 4/3 * (1 - x - y) * (1 - 2 * x - 2 * y) * (1 - 4 * x - 4 * y) - 2 * (1 - x - y) * (1 - 4/3 * x - 4/3 * y) * (1 - 4 * x - 4 * y) - 4 * (1 - x - y) * (1 - 4/3 * x - 4/3 * y) * (1 - 2 * x - 2 * y)
        (x,y) -> 0
        (x,y) -> (4/3 * y - 1/3) * (2 * y - 1) * (4 * y - 3) + 4/3 * y * (2 * y - 1) * (4 * y - 3) + 2 * y * (4/3 * y - 1/3) * (4 * y - 3) + 4 * y * (4/3 * y - 1/3) * (2 * y - 1)
        (x,y) -> -16/3 * x * (3/2 - 2 * x - 2 * y) * (2 - 4 * x - 4 * y) - 32/3 * x * (1 - x - y) * (2 - 4 * x - 4 * y) - 64/3 * x * (1 - x - y) * (3/2 - 2 * x - 2 * y)
        (x,y) -> -4 * x * (4 * x - 1) * (3 - 4 * x - 4 * y) - 16 * x * (4 * x - 1) * (1 - x - y)
        (x,y) -> -16/3 * x * (2 * x - 1/2) * (4 * x - 2)
        (x,y) -> 16/3 * x * (2 * x - 1/2) * (4 * x - 2)
        (x,y) -> 4 * x * (4 * x - 1) * (4 * y - 1) + 16 * x * (4 * x - 1) * y
        (x,y) -> 16/3 * x * (2 * y - 1/2) * (4 * y - 2) + 32/3 * x * y * (4 * y - 2) + 64/3 * x * y * (2 * y - 1/2)
        (x,y) -> 4/3 * (2 * y - 1/2) * (4 * y - 2) * (4 - 4 * x - 4 * y) + 8/3 * y * (4 * y - 2) * (4 - 4 * x - 4 * y) + 16/3 * y * (2 * y - 1/2) * (4 - 4 * x - 4 * y) - 16/3 * y * (2 * y - 1/2) * (4 * y - 2)
        (x,y) -> 4 * (4 * y - 1) * (1 - x - y) * (3 - 4 * x - 4 * y) + 16 * y * (1 - x - y) * (3 - 4 * x - 4 * y) - 4 * y * (4 * y - 1) * (3 - 4 * x - 4 * y) - 16 * y * (4 * y - 1) * (1 - x - y)
        (x,y) -> 16/3 * (1 - x - y) * (3/2 - 2 * x - 2 * y) * (2 - 4 * x - 4 * y) - 16/3 * y * (3/2 - 2 * x - 2 * y) * (2 - 4 * x - 4 * y) - 32/3 * y * (1 - x - y) * (2 - 4 * x - 4 * y) - 64/3 * y * (1 - x - y) * (3/2 - 2 * x - 2 * y)
        (x,y) -> 32 * x * (1 - x - y) * (3 - 4 * x - 4 * y) - 32 * x * y * (3 - 4 * x - 4 * y) - 128 * x * y * (1 - x - y)
        (x,y) -> 8 * x * (4 * x - 1) * (4 - 4 * x - 4 * y) - 32 * x * (4 * x - 1) * y
        (x,y) -> 8 * x * (4 * y - 1) * (4 - 4 * x - 4 * y) + 32 * x * y * (4 - 4 * x - 4 * y) - 32 * x * y * (4 * y - 1)]
    elseif n==5
        [(x,y) -> (1 - x - y) * (1 - 5/4 * x - 5/4 * y) * (1 - 5/3 * x - 5/3 * y) * (1 - 5/2 * x - 5/2 * y) * (1 - 5 * x - 5 * y)
        (x,y) -> x * (5/4 * x - 1/4) * (5/3 * x - 2/3) * (5/2 * x - 3/2) * (5 * x - 4)
        (x,y) -> y * (5/4 * y - 1/4) * (5/3 * y - 2/3) * (5/2 * y - 3/2) * (5 * y - 4)
        (x,y) -> 25/4 * x * (1 - x - y) * (4/3 - 5/3 * x - 5/3 * y) * (3/2 - 5/2 * x - 5/2 * y) * (2 - 5 * x - 5 * y)
        (x,y) -> 25/6 * x * (5 * x - 1) * (1 - x - y) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y)
        (x,y) -> 25/6 * x * (5/2 * x - 1/2) * (5 * x - 2) * (1 - x - y) * (4 - 5 * x - 5 * y)
        (x,y) -> 5/4 * x * (5/3 * x - 1/3) * (5/2 * x - 1) * (5 * x - 3) * (5 - 5 * x - 5 * y)
        (x,y) -> 25/4 * x * (5/3 * x - 1/3) * (5/2 * x - 1) * (5 * x - 3) * y
        (x,y) -> 25/6 * x * (5/2 * x - 1/2) * (5 * x - 2) * y * (5 * y - 1)
        (x,y) -> 25/6 * x * (5 * x - 1) * y * (5/2 * y - 1/2) * (5 * y - 2)
        (x,y) -> 25/4 * x * y * (5/3 * y - 1/3) * (5/2 * y - 1) * (5 * y - 3)
        (x,y) -> 5/4 * y * (5/3 * y - 1/3) * (5/2 * y - 1) * (5 * y - 3) * (5 - 5 * x - 5 * y)
        (x,y) -> 25/6 * y * (5/2 * y - 1/2) * (5 * y - 2) * (1 - x - y) * (4 - 5 * x - 5 * y)
        (x,y) -> 25/6 * y * (5 * y - 1) * (1 - x - y) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y)
        (x,y) -> 25/4 * y * (1 - x - y) * (4/3 - 5/3 * x - 5/3 * y) * (3/2 - 5/2 * x - 5/2 * y) * (2 - 5 * x - 5 * y)
        (x,y) -> 125/3 * x * y * (1 - x - y) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y)
        (x,y) -> 125/4 * x * (5 * x - 1) * y * (1 - x - y) * (4 - 5 * x - 5 * y)
        (x,y) -> 25/3 * x * (5/2 * x - 1/2) * (5 * x - 2) * y * (5 - 5 * x - 5 * y)
        (x,y) -> 125/4 * x * y * (5 * y - 1) * (1 - x - y) * (4 - 5 * x - 5 * y)
        (x,y) -> 25/4 * x * (5 * x - 1) * y * (5 * y - 1) * (5 - 5 * x - 5 * y)
        (x,y) -> 25/3 * x * y * (5/2 * y - 1/2) * (5 * y - 2) * (5 - 5 * x - 5 * y)],
        [(x,y) -> -(1 - 5/4 * x - 5/4 * y) * (1 - 5/3 * x - 5/3 * y) * (1 - 5/2 * x - 5/2 * y) * (1 - 5 * x - 5 * y) - 5/4 * (1 - x - y) * (1 - 5/3 * x - 5/3 * y) * (1 - 5/2 * x - 5/2 * y) * (1 - 5 * x - 5 * y) - 5/3 * (1 - x - y) * (1 - 5/4 * x - 5/4 * y) * (1 - 5/2 * x - 5/2 * y) * (1 - 5 * x - 5 * y) - 5/2 * (1 - x - y) * (1 - 5/4 * x - 5/4 * y) * (1 - 5/3 * x - 5/3 * y) * (1 - 5 * x - 5 * y) - 5 * (1 - x - y) * (1 - 5/4 * x - 5/4 * y) * (1 - 5/3 * x - 5/3 * y) * (1 - 5/2 * x - 5/2 * y)
        (x,y) -> (5/4 * x - 1/4) * (5/3 * x - 2/3) * (5/2 * x - 3/2) * (5 * x - 4) + 5/4 * x * (5/3 * x - 2/3) * (5/2 * x - 3/2) * (5 * x - 4) + 5/3 * x * (5/4 * x - 1/4) * (5/2 * x - 3/2) * (5 * x - 4) + 5/2 * x * (5/4 * x - 1/4) * (5/3 * x - 2/3) * (5 * x - 4) + 5 * x * (5/4 * x - 1/4) * (5/3 * x - 2/3) * (5/2 * x - 3/2)
        (x,y) -> 0
        (x,y) -> 25/4 * (1 - x - y) * (4/3 - 5/3 * x - 5/3 * y) * (3/2 - 5/2 * x - 5/2 * y) * (2 - 5 * x - 5 * y) - 25/4 * x * (4/3 - 5/3 * x - 5/3 * y) * (3/2 - 5/2 * x - 5/2 * y) * (2 - 5 * x - 5 * y) - 125/12 * x * (1 - x - y) * (3/2 - 5/2 * x - 5/2 * y) * (2 - 5 * x - 5 * y) - 125/8 * x * (1 - x - y) * (4/3 - 5/3 * x - 5/3 * y) * (2 - 5 * x - 5 * y) - 125/4 * x * (1 - x - y) * (4/3 - 5/3 * x - 5/3 * y) * (3/2 - 5/2 * x - 5/2 * y)
        (x,y) -> 25/6 * (5 * x - 1) * (1 - x - y) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y) + 125/6 * x * (1 - x - y) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y) - 25/6 * x * (5 * x - 1) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y) - 125/12 * x * (5 * x - 1) * (1 - x - y) * (3 - 5 * x - 5 * y) - 125/6 * x * (5 * x - 1) * (1 - x - y) * (2 - 5/2 * x - 5/2 * y)
        (x,y) -> 25/6 * (5/2 * x - 1/2) * (5 * x - 2) * (1 - x - y) * (4 - 5 * x - 5 * y) + 125/12 * x * (5 * x - 2) * (1 - x - y) * (4 - 5 * x - 5 * y) + 125/6 * x * (5/2 * x - 1/2) * (1 - x - y) * (4 - 5 * x - 5 * y) - 25/6 * x * (5/2 * x - 1/2) * (5 * x - 2) * (4 - 5 * x - 5 * y) - 125/6 * x * (5/2 * x - 1/2) * (5 * x - 2) * (1 - x - y)
        (x,y) -> 5/4 * (5/3 * x - 1/3) * (5/2 * x - 1) * (5 * x - 3) * (5 - 5 * x - 5 * y) + 25/12 * x * (5/2 * x - 1) * (5 * x - 3) * (5 - 5 * x - 5 * y) + 25/8 * x * (5/3 * x - 1/3) * (5 * x - 3) * (5 - 5 * x - 5 * y) + 25/4 * x * (5/3 * x - 1/3) * (5/2 * x - 1) * (5 - 5 * x - 5 * y) - 25/4 * x * (5/3 * x - 1/3) * (5/2 * x - 1) * (5 * x - 3)
        (x,y) -> 25/4 * (5/3 * x - 1/3) * (5/2 * x - 1) * (5 * x - 3) * y + 125/12 * x * (5/2 * x - 1) * (5 * x - 3) * y + 125/8 * x * (5/3 * x - 1/3) * (5 * x - 3) * y + 125/4 * x * (5/3 * x - 1/3) * (5/2 * x - 1) * y
        (x,y) -> 25/6 * (5/2 * x - 1/2) * (5 * x - 2) * y * (5 * y - 1) + 125/12 * x * (5 * x - 2) * y * (5 * y - 1) + 125/6 * x * (5/2 * x - 1/2) * y * (5 * y - 1)
        (x,y) -> 25/6 * (5 * x - 1) * y * (5/2 * y - 1/2) * (5 * y - 2) + 125/6 * x * y * (5/2 * y - 1/2) * (5 * y - 2)
        (x,y) -> 25/4 * y * (5/3 * y - 1/3) * (5/2 * y - 1) * (5 * y - 3)
        (x,y) -> -25/4 * y * (5/3 * y - 1/3) * (5/2 * y - 1) * (5 * y - 3)
        (x,y) -> -25/6 * y * (5/2 * y - 1/2) * (5 * y - 2) * (4 - 5 * x - 5 * y) - 125/6 * y * (5/2 * y - 1/2) * (5 * y - 2) * (1 - x - y)
        (x,y) -> -25/6 * y * (5 * y - 1) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y) - 125/12 * y * (5 * y - 1) * (1 - x - y) * (3 - 5 * x - 5 * y) - 125/6 * y * (5 * y - 1) * (1 - x - y) * (2 - 5/2 * x - 5/2 * y)
        (x,y) -> -25/4 * y * (4/3 - 5/3 * x - 5/3 * y) * (3/2 - 5/2 * x - 5/2 * y) * (2 - 5 * x - 5 * y) - 125/12 * y * (1 - x - y) * (3/2 - 5/2 * x - 5/2 * y) * (2 - 5 * x - 5 * y) - 125/8 * y * (1 - x - y) * (4/3 - 5/3 * x - 5/3 * y) * (2 - 5 * x - 5 * y) - 125/4 * y * (1 - x - y) * (4/3 - 5/3 * x - 5/3 * y) * (3/2 - 5/2 * x - 5/2 * y)
        (x,y) -> 125/3 * y * (1 - x - y) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y) - 125/3 * x * y * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y) - 625/6 * x * y * (1 - x - y) * (3 - 5 * x - 5 * y) - 625/3 * x * y * (1 - x - y) * (2 - 5/2 * x - 5/2 * y)
        (x,y) -> 125/4 * (5 * x - 1) * y * (1 - x - y) * (4 - 5 * x - 5 * y) + 625/4 * x * y * (1 - x - y) * (4 - 5 * x - 5 * y) - 125/4 * x * (5 * x - 1) * y * (4 - 5 * x - 5 * y) - 625/4 * x * (5 * x - 1) * y * (1 - x - y)
        (x,y) -> 25/3 * (5/2 * x - 1/2) * (5 * x - 2) * y * (5 - 5 * x - 5 * y) + 125/6 * x * (5 * x - 2) * y * (5 - 5 * x - 5 * y) + 125/3 * x * (5/2 * x - 1/2) * y * (5 - 5 * x - 5 * y) - 125/3 * x * (5/2 * x - 1/2) * (5 * x - 2) * y
        (x,y) -> 125/4 * y * (5 * y - 1) * (1 - x - y) * (4 - 5 * x - 5 * y) - 125/4 * x * y * (5 * y - 1) * (4 - 5 * x - 5 * y) - 625/4 * x * y * (5 * y - 1) * (1 - x - y)
        (x,y) -> 25/4 * (5 * x - 1) * y * (5 * y - 1) * (5 - 5 * x - 5 * y) + 125/4 * x * y * (5 * y - 1) * (5 - 5 * x - 5 * y) - 125/4 * x * (5 * x - 1) * y * (5 * y - 1)
        (x,y) -> 25/3 * y * (5/2 * y - 1/2) * (5 * y - 2) * (5 - 5 * x - 5 * y) - 125/3 * x * y * (5/2 * y - 1/2) * (5 * y - 2)],
        [(x,y) -> -(1 - 5/4 * x - 5/4 * y) * (1 - 5/3 * x - 5/3 * y) * (1 - 5/2 * x - 5/2 * y) * (1 - 5 * x - 5 * y) - 5/4 * (1 - x - y) * (1 - 5/3 * x - 5/3 * y) * (1 - 5/2 * x - 5/2 * y) * (1 - 5 * x - 5 * y) - 5/3 * (1 - x - y) * (1 - 5/4 * x - 5/4 * y) * (1 - 5/2 * x - 5/2 * y) * (1 - 5 * x - 5 * y) - 5/2 * (1 - x - y) * (1 - 5/4 * x - 5/4 * y) * (1 - 5/3 * x - 5/3 * y) * (1 - 5 * x - 5 * y) - 5 * (1 - x - y) * (1 - 5/4 * x - 5/4 * y) * (1 - 5/3 * x - 5/3 * y) * (1 - 5/2 * x - 5/2 * y)
        (x,y) -> 0
        (x,y) -> (5/4 * y - 1/4) * (5/3 * y - 2/3) * (5/2 * y - 3/2) * (5 * y - 4) + 5/4 * y * (5/3 * y - 2/3) * (5/2 * y - 3/2) * (5 * y - 4) + 5/3 * y * (5/4 * y - 1/4) * (5/2 * y - 3/2) * (5 * y - 4) + 5/2 * y * (5/4 * y - 1/4) * (5/3 * y - 2/3) * (5 * y - 4) + 5 * y * (5/4 * y - 1/4) * (5/3 * y - 2/3) * (5/2 * y - 3/2)
        (x,y) -> -25/4 * x * (4/3 - 5/3 * x - 5/3 * y) * (3/2 - 5/2 * x - 5/2 * y) * (2 - 5 * x - 5 * y) - 125/12 * x * (1 - x - y) * (3/2 - 5/2 * x - 5/2 * y) * (2 - 5 * x - 5 * y) - 125/8 * x * (1 - x - y) * (4/3 - 5/3 * x - 5/3 * y) * (2 - 5 * x - 5 * y) - 125/4 * x * (1 - x - y) * (4/3 - 5/3 * x - 5/3 * y) * (3/2 - 5/2 * x - 5/2 * y)
        (x,y) -> -25/6 * x * (5 * x - 1) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y) - 125/12 * x * (5 * x - 1) * (1 - x - y) * (3 - 5 * x - 5 * y) - 125/6 * x * (5 * x - 1) * (1 - x - y) * (2 - 5/2 * x - 5/2 * y)
        (x,y) -> -25/6 * x * (5/2 * x - 1/2) * (5 * x - 2) * (4 - 5 * x - 5 * y) - 125/6 * x * (5/2 * x - 1/2) * (5 * x - 2) * (1 - x - y)
        (x,y) -> -25/4 * x * (5/3 * x - 1/3) * (5/2 * x - 1) * (5 * x - 3)
        (x,y) -> 25/4 * x * (5/3 * x - 1/3) * (5/2 * x - 1) * (5 * x - 3)
        (x,y) -> 25/6 * x * (5/2 * x - 1/2) * (5 * x - 2) * (5 * y - 1) + 125/6 * x * (5/2 * x - 1/2) * (5 * x - 2) * y
        (x,y) -> 25/6 * x * (5 * x - 1) * (5/2 * y - 1/2) * (5 * y - 2) + 125/12 * x * (5 * x - 1) * y * (5 * y - 2) + 125/6 * x * (5 * x - 1) * y * (5/2 * y - 1/2)
        (x,y) -> 25/4 * x * (5/3 * y - 1/3) * (5/2 * y - 1) * (5 * y - 3) + 125/12 * x * y * (5/2 * y - 1) * (5 * y - 3) + 125/8 * x * y * (5/3 * y - 1/3) * (5 * y - 3) + 125/4 * x * y * (5/3 * y - 1/3) * (5/2 * y - 1)
        (x,y) -> 5/4 * (5/3 * y - 1/3) * (5/2 * y - 1) * (5 * y - 3) * (5 - 5 * x - 5 * y) + 25/12 * y * (5/2 * y - 1) * (5 * y - 3) * (5 - 5 * x - 5 * y) + 25/8 * y * (5/3 * y - 1/3) * (5 * y - 3) * (5 - 5 * x - 5 * y) + 25/4 * y * (5/3 * y - 1/3) * (5/2 * y - 1) * (5 - 5 * x - 5 * y) - 25/4 * y * (5/3 * y - 1/3) * (5/2 * y - 1) * (5 * y - 3)
        (x,y) -> 25/6 * (5/2 * y - 1/2) * (5 * y - 2) * (1 - x - y) * (4 - 5 * x - 5 * y) + 125/12 * y * (5 * y - 2) * (1 - x - y) * (4 - 5 * x - 5 * y) + 125/6 * y * (5/2 * y - 1/2) * (1 - x - y) * (4 - 5 * x - 5 * y) - 25/6 * y * (5/2 * y - 1/2) * (5 * y - 2) * (4 - 5 * x - 5 * y) - 125/6 * y * (5/2 * y - 1/2) * (5 * y - 2) * (1 - x - y)
        (x,y) -> 25/6 * (5 * y - 1) * (1 - x - y) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y) + 125/6 * y * (1 - x - y) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y) - 25/6 * y * (5 * y - 1) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y) - 125/12 * y * (5 * y - 1) * (1 - x - y) * (3 - 5 * x - 5 * y) - 125/6 * y * (5 * y - 1) * (1 - x - y) * (2 - 5/2 * x - 5/2 * y)
        (x,y) -> 25/4 * (1 - x - y) * (4/3 - 5/3 * x - 5/3 * y) * (3/2 - 5/2 * x - 5/2 * y) * (2 - 5 * x - 5 * y) - 25/4 * y * (4/3 - 5/3 * x - 5/3 * y) * (3/2 - 5/2 * x - 5/2 * y) * (2 - 5 * x - 5 * y) - 125/12 * y * (1 - x - y) * (3/2 - 5/2 * x - 5/2 * y) * (2 - 5 * x - 5 * y) - 125/8 * y * (1 - x - y) * (4/3 - 5/3 * x - 5/3 * y) * (2 - 5 * x - 5 * y) - 125/4 * y * (1 - x - y) * (4/3 - 5/3 * x - 5/3 * y) * (3/2 - 5/2 * x - 5/2 * y)
        (x,y) -> 125/3 * x * (1 - x - y) * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y) - 125/3 * x * y * (2 - 5/2 * x - 5/2 * y) * (3 - 5 * x - 5 * y) - 625/6 * x * y * (1 - x - y) * (3 - 5 * x - 5 * y) - 625/3 * x * y * (1 - x - y) * (2 - 5/2 * x - 5/2 * y)
        (x,y) -> 125/4 * x * (5 * x - 1) * (1 - x - y) * (4 - 5 * x - 5 * y) - 125/4 * x * (5 * x - 1) * y * (4 - 5 * x - 5 * y) - 625/4 * x * (5 * x - 1) * y * (1 - x - y)
        (x,y) -> 25/3 * x * (5/2 * x - 1/2) * (5 * x - 2) * (5 - 5 * x - 5 * y) - 125/3 * x * (5/2 * x - 1/2) * (5 * x - 2) * y
        (x,y) -> 125/4 * x * (5 * y - 1) * (1 - x - y) * (4 - 5 * x - 5 * y) + 625/4 * x * y * (1 - x - y) * (4 - 5 * x - 5 * y) - 125/4 * x * y * (5 * y - 1) * (4 - 5 * x - 5 * y) - 625/4 * x * y * (5 * y - 1) * (1 - x - y)
        (x,y) -> 25/4 * x * (5 * x - 1) * (5 * y - 1) * (5 - 5 * x - 5 * y) + 125/4 * x * (5 * x - 1) * y * (5 - 5 * x - 5 * y) - 125/4 * x * (5 * x - 1) * y * (5 * y - 1)
        (x,y) -> 25/3 * x * (5/2 * y - 1/2) * (5 * y - 2) * (5 - 5 * x - 5 * y) + 125/6 * x * y * (5 * y - 2) * (5 - 5 * x - 5 * y) + 125/3 * x * y * (5/2 * y - 1/2) * (5 - 5 * x - 5 * y) - 125/3 * x * y * (5/2 * y - 1/2) * (5 * y - 2)]
    elseif n==6
        [],
        [],
        []
    elseif n==7
        [],
        [],
        []
    elseif n==8
        [],
        [],
        []
    end
end

struct Lagrange
    l
    l1
    l2
    degree
    reftri
    function Lagrange(degree::Int)
        l,l1,l2=LagrangeBase(degree)
        reftri=RefTriangle(degree)
        new(l,l1,l2,degree,reftri)
    end
end

function Quadrature(E::Lagrange,nq::Int)
    Q=QuadTri(nq)
    n=length(E.l)
    L=Vector{Vector{Float64}}(undef,n)
    L1=Vector{Vector{Float64}}(undef,n)
    L2=Vector{Vector{Float64}}(undef,n)
    for i = 1:n
        L[i]=E.l[i].(Q.Points.x,Q.Points.y)
        L1[i]=E.l1[i].(Q.Points.x,Q.Points.y)
        L2[i]=E.l2[i].(Q.Points.x,Q.Points.y)
    end
    Qs=QuadSeg(nq)
    n=E.degree+1
    Ls=Vector{Vector{Float64}}(undef,n)
    p=[1; 2; 4:n+1]
    for i=1:n
        la(x)=E.l[p[i]](x,0)
        Ls[i]=la.(Qs.Points)
    end
    return L, L1, L2, Q, Ls, Qs
end

function LinearTranform(tx::Vector{Float64},ty::Vector{Float64})
    J=(tx[2]-tx[1])*(ty[3]-ty[1])-(tx[3]-tx[1])*(ty[2]-ty[1])
    invJT=[ty[3]-ty[1] -ty[2]+ty[1]; -tx[3]+tx[1] tx[2]-tx[1]]/J
    return J, invJT
end
